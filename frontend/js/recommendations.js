// js/recommendations.js - Sistema Avan√ßado de Recomenda√ß√µes

const RECOMMENDATION_API = 'http://localhost:8000/recommendation';

// Carregar recomenda√ß√µes baseadas nas √°reas selecionadas
// Carregar recomenda√ß√µes baseadas nas √°reas selecionadas
async function loadRecommendations() {
    const loadingDiv = document.getElementById('recommendations-loading');
    const listDiv = document.getElementById('recommendations-list');
    const infoDiv = document.getElementById('recommendations-info');
    
    // Obter √°reas selecionadas
    const selectedAreas = getSelectedAreas();
    
    if (selectedAreas.length === 0) {
        infoDiv.innerHTML = '<div class="error">‚ö†Ô∏è Selecione pelo menos uma √°rea de interesse</div>';
        return;
    }
    
    try {
        loadingDiv.innerHTML = '<p>üîÑ Buscando recomenda√ß√µes personalizadas...</p>';
        listDiv.innerHTML = '';
        infoDiv.innerHTML = `<p>üéØ Buscando recomenda√ß√µes para: <strong>${selectedAreas.join(', ')}</strong> no n√≠vel <strong>${getNivelText()}</strong></p>`;
        
        const response = await fetch(`${RECOMMENDATION_API}/recommend`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getToken()}`
            },
            body: JSON.stringify({
                user_id: 'user_current',
                areas: selectedAreas,
                nivel: currentNivel,
                top_n: 8
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            loadingDiv.innerHTML = '';
            
            if (data.recommendations && data.recommendations.length > 0) {
                listDiv.innerHTML = `<h3>üéØ ${data.total_recommended} Recomenda√ß√µes Encontradas</h3>`;
                
                data.recommendations.forEach(material => {
                    const materialCard = `
                        <div class="material-card">
                            <h4>${material.image} ${material.title}</h4>
                            <p><strong>Autor:</strong> ${material.author} | <strong>N√≠vel:</strong> ${material.difficulty}</p>
                            <p><strong>P√°ginas:</strong> ${material.pages} | <strong>Ano:</strong> ${material.year}</p>
                            <p>${material.description}</p>
                            <div class="tags">
                                ${material.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                            </div>
                            <div style="margin-top: 10px;">
                                <button onclick="addToBooklist(${material.id})" class="btn btn-primary" style="padding: 8px 15px; font-size: 14px;">
                                    ‚ûï Adicionar √† Minha Lista
                                </button>
                            </div>
                        </div>
                    `;
                    listDiv.innerHTML += materialCard;
                });
            } else {
                listDiv.innerHTML = '<div class="error">üòî Nenhuma recomenda√ß√£o encontrada para suas √°reas selecionadas.</div>';
            }
            
        } else {
            loadingDiv.innerHTML = `<div class="error">‚ùå Erro: ${data.error}</div>`;
        }
        
    } catch (error) {
        loadingDiv.innerHTML = '<div class="error">‚ùå Erro ao carregar recomenda√ß√µes. Verifique se o servi√ßo est√° rodando.</div>';
    }
}

// Obter √°reas selecionadas
function getSelectedAreas() {
    const areas = [];
    const checkboxes = document.querySelectorAll('.area-checkbox input[type="checkbox"]');
    
    checkboxes.forEach(checkbox => {
        if (checkbox.checked) {
            areas.push(checkbox.value);
        }
    });
    
    return areas;
}

// Obter texto do n√≠vel
function getNivelText() {
    return currentNivel === 1 ? 'Iniciante' : currentNivel === 2 ? 'Intermedi√°rio' : 'Avan√ßado';
}

// Carregar todas as √°reas dispon√≠veis (para debug)
async function loadAreas() {
    try {
        const response = await fetch(`${RECOMMENDATION_API}/areas`);
        const data = await response.json();
        console.log('√Åreas dispon√≠veis:', data.areas);
    } catch (error) {
        console.log('Erro ao carregar √°reas:', error);
    }
}

// Inicializar
document.addEventListener('DOMContentLoaded', function() {
    loadAreas();
});

// ==================== FUN√á√ïES DA LISTA PESSOAL ====================

// Carregar lista pessoal do usu√°rio
async function loadMyBooklist() {
    const booklistDiv = document.getElementById('my-booklist');
    const user_id = 'user_current'; // Em produ√ß√£o, pegar do token JWT
    
    try {
        booklistDiv.innerHTML = '<p>üîÑ Carregando sua lista...</p>';
        
        const response = await fetch(`${RECOMMENDATION_API}/user/${user_id}/booklist`);
        const data = await response.json();
        
        if (response.ok) {
            if (data.books && data.books.length > 0) {
                let html = `<h4>üìö Sua Lista (${data.total} livros)</h4>`;
                
                data.books.forEach(book => {
                    const statusIcons = {
                        'quero_ler': 'üìñ Quero Ler',
                        'lendo': 'üîç Lendo', 
                        'lido': '‚úÖ Lido'
                    };
                    
                    html += `
                        <div class="material-card">
                            <h4>${book.material.image} ${book.material.title}</h4>
                            <p><strong>Autor:</strong> ${book.material.author} | <strong>Status:</strong> ${statusIcons[book.status]}</p>
                            <p><strong>Adicionado em:</strong> ${new Date(book.added_at).toLocaleDateString()}</p>
                            <p>${book.material.description}</p>
                            <div class="tags">
                                ${book.material.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                            </div>
                            <div style="margin-top: 10px;">
                                <button onclick="removeFromBooklist(${book.id})" class="btn btn-secondary" style="padding: 5px 10px; font-size: 12px;">
                                    üóëÔ∏è Remover
                                </button>
                            </div>
                        </div>
                    `;
                });
                
                booklistDiv.innerHTML = html;
            } else {
                booklistDiv.innerHTML = '<p>üòî Sua lista est√° vazia. Adicione livros das recomenda√ß√µes!</p>';
            }
        } else {
            booklistDiv.innerHTML = `<div class="error">‚ùå Erro ao carregar lista</div>`;
        }
        
    } catch (error) {
        booklistDiv.innerHTML = '<div class="error">‚ùå Erro de conex√£o</div>';
    }
}

// Adicionar livro √† lista pessoal
// Adicionar livro √† lista pessoal
async function addToBooklist(materialId) {
    const user_id = 'user_current';
    
    try {
        const response = await fetch(`${RECOMMENDATION_API}/user/${user_id}/booklist`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                material_id: materialId,
                status: 'quero_ler'
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            alert('‚úÖ Livro adicionado √† sua lista!');
            loadMyBooklist(); // Atualiza a lista
        } else {
            alert(`‚ùå Erro: ${data.error}`);
        }
        
    } catch (error) {
        alert('‚ùå Erro de conex√£o');
    }
}

// Remover livro da lista
async function removeFromBooklist(bookId) {
    const user_id = 'user_current';
    
    if (!confirm('Tem certeza que quer remover este livro da sua lista?')) {
        return;
    }
    
    try {
        const response = await fetch(`${RECOMMENDATION_API}/user/${user_id}/booklist/${bookId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${getToken()}`
            }
        });
        
        const data = await response.json();
        
        if (response.ok) {
            alert('‚úÖ Livro removido da sua lista!');
            loadMyBooklist(); // Atualiza a lista
        } else {
            alert(`‚ùå Erro: ${data.error}`);
        }
        
    } catch (error) {
        alert('‚ùå Erro de conex√£o');
    }
}